---
title: "Modelling M/EEG data with Bayesian nonparametric multilevel models"
shorttitle: "Bayesian M/EEG modelling"
author:
  - name: Ladislas Nalborczyk
    corresponding: true
    orcid: 0000-0002-7419-9855
    email: ladislas.nalborczyk@cnrs.fr
    url: https://lnalborczyk.github.io
    affiliations:
      - id: id1
        name: "Aix Marseille Univ, CNRS, LPL"
        address: "5 avenue Pasteur"
        city: "13100 Aix-en-Provence"
        country: France
  - name: Paul BÃ¼rkner
    orcid: 0000-0001-5765-8995
    url: https://paulbuerkner.com
    affiliations:
      - name: "TU Dortmund University, Department of Statistics"
author-note:
  disclosures:
    conflict-of-interest: "The authors have no conflicts of interest to disclose."
    # financial-support: "This study was supported by Grant [Grant Number] from [Funding Source]."
abstract: "Time-resolved electrophysoiological measurements such as those offered by magneto- or electro-encephalography (M/EEG) provide a unique window onto neural activity underlying cognitive process and how they unfold over time. Typically, we are interested in testing whether such measures differ across conditions and/or groups. The conventional approach consists in conducting mass-univariate statistics followed by some form of multiplicity correction (e.g., FDR, FWER) or cluster-based inference. However, these cluster-based methods have an important downside: they shift the focus of inference from the timepoint to the cluster level, thus preventing any conclusion to be made about the onset and offset of effects (e.g., differences across conditions). Here, we introduce a novel *model-based approch* for analysing one-dimensional M/EEG timeseries such as ERPs or decoding timecourses and their differences across conditions. This approach relies on Bayesian nonparametric multilevel modelling (multilevel generalised additive models or Gaussian processes), which outputs posterior probabililities of the effect being above chance at every timestep/voxel, while naturally taking into account the temporal dependencies and between-subject variability present in such data."
keywords: [EEG, MEG, generalised additive models, gaussian processes, mixed-effects models, Bayesian statistics, brms]
floatsintext: true
numbered-lines: true
bibliography:
  - meeg_modelling.bib
  - grateful-refs.bib
suppress-title-page: false
link-citations: true
# see https://www.overleaf.com/learn/latex/Font_typefaces
# and systemfonts::system_fonts()
# pdf-engine: xelatex
# monofont: Roboto
mainfont: CMU Serif
fontsize: 10pt
draftfirst: false
draftall: false
a4paper: true
lang: en
toc: true
language:
  citation-last-author-separator: "&"
  email: "email"
  title-block-author-note: "Author note"
  title-block-correspondence-note: "Correspondence concerning this article should be addressed to"
  title-block-role-introduction: "Author roles were classified using the Contributor Role Taxonomy (CRediT; https://credit.niso.org/) as follows:"
format:
  # apaquarto-html: default
  apaquarto-pdf:
    documentmode: doc # man, jou, doc, stu
    keep-tex: true
    include-in-header:
      - text: |
          \usepackage{mathtools}
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
# loading packages
library(changepoint)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(MetBrewer)
library(grateful)
library(permuco)
library(scales)
library(pakret)
library(scico)
library(knitr)
library(brms)

# setting knitr options
knitr::opts_chunk$set(
    cache = TRUE,
    eval = TRUE,
    echo = TRUE,
    warning = FALSE,
    message = FALSE,
    fig.align = "center",
    out.width = "100%",
    fig.asp = 0.75,
    fig.pos = "!htb",
    dev = "cairo_pdf"
    )

# setting a default ggplot2 theme
theme_set(theme_light(base_size = 10, base_family = "Open Sans") )

# template for citing R packages
pkrt_set(pkg = "the `R` package `:pkg` v :ver [:ref]")
```

# Introduction (in progress)

Here are some useful references to be discussed [@combrisson_exceeding_2015; @ehinger_unfold_2019; @hayasaka_validating_2003; @luck_how_2017; @pedersen_hierarchical_2019; @riutort-mayol_practical_2023; @rousselet_using_2025; @frossard2021; @frossard2022; @gramfort2013; @maris2007; @pernet2015]... See also [@maris2011]... and [@rosenblatt2018] (history of cluster-based approaches and using a data split?)... Cluster failure [@eklund2016]...

In the following, we consider two approaches to modelling the non-linear timecourse of M/EEG ERPs or decoding performance: i) generalised additive models (GAMs) with thin-plate smoothing splines [@wood2003; @wood2004] and ii) Gaussian processes (GPs) with a smooth covariance kernel [@rasmussen2005] and low-rank approximation [@riutort-mayol_practical_2023].

## Previous modelling work

Disentangling overlapping processes [@skukies_brain_2024; @skukies_modelling_2021]... Using Bayes factors [@teichmann2022]...

## Generalised additive models

In generalised additive models (GAMs), the functional relationship between predictors and response variable is decomposed into a sum of low-dimensional non-parametric functions. A typical GAM has the following form:

$$
\begin{aligned} 
y_{i} &\sim \mathrm{EF}\left(\mu_{i}, \phi\right)\\
g\left(\mu_i\right) &= A_{i} + \mathbf{X}_{i} \gamma + \sum_{j=1}^{J} f_{j}\left(x_{ij}\right)
\end{aligned}
$$

where $y_{i} \sim \mathrm{EF}\left(\mu_{i}, \phi\right)$ denotes that the observations $y_{i}$ are distributed as some member of the exponential family of distributions (e.g., Gaussian, Gamma, Beta, Poisson) with mean $\mu_{i}$ and scale parameter $\phi$; $g(\cdot)$ is the link function, $A$ is an offset, $\mathbf{X}_{i}$ is the $i$th row of a parametric model matrix, $\gamma$ is a vector of parameters for the parametric terms, $f_{j}$ is a smooth function of covariate $x_{j}$. The smooth functions $f_{j}$ are represented in the model via penalised splines basis expansions of the covariates, that are a weighted sum of basis functions:

$$
f_{j}\left(x_{i j}\right) = \sum_{k=1}^K \beta_{jk} b_{jk}\left(x_{ij}\right)
$$

where $\beta_{jk}$ is the weight (coefficient) associated with the $k$th basis function $b_{jk}()$ evaluated at the covariate value $x_{ij}$ for the $j$th smooth function $f_{j}$. Splines' coefficients are penalised...

## Gaussian process regression

A Gaussian process (GP) is a stochastic process that defines the distribution over a collection of random variables indexed by a continuous variable, that is $\{f(t): t \in \mathcal{T}\}$ for some index set $\mathcal{T}$ [@riutort-mayol_practical_2023; @rasmussen2005]. Whereas Bayesian linear regression outputs a distribution over the parameters of some predefind parametric model, the GP approach, in contrast, is a non-parametric approach, in that it finds a distribution over the possible functions that are consistent with the observed data. However, note that nonparametric does not mean there aren't parameters, it means that there are infinitely many parameters.

From [brms documentation](https://www.rdocumentation.org/packages/brms/versions/2.22.0/topics/gp): A GP is a stochastic process, which describes the relation between one or more predictors $x=\left(x_{1}, \ldots, x_{d}\right)$ and a response $f(x)$, where $d$ is the number of predictors. A GP is the generalization of the multivariate normal distribution to an infinite number of dimensions. Thus, it can be interpreted as a prior over functions. The values of $f()$ at any finite set of locations are jointly multivariate normal, with a covariance matrix defined by the covariance kernel $k_p\left(x_i, x_j\right)$, where $p$ is the vector of parameters of the GP:

$$
\left(f\left(x_{1}\right), \ldots f\left(x_{n}\right) \sim \operatorname{MVN}\left(0, \left(k_p\left(x_{i}, x_{j}\right)\right)_{i, j=1}^{n}\right)\right.
$$

The smoothness and general behaviour of the function $f$ depends only on the choice of covariance kernel, which ensures that values that are close together in the input space will be mapped to similar output values...

From this perspective, $f$ is a realisation of an infinite dimensional normal distribution:

$$
f \sim \mathrm{Normal}(0, C(\lambda))
$$

where $C$ is a covariance kernel with hyperparameters $\lambda$ that defines the covariance between two function values $f\left(t_1\right)$ and $f\left(t_2\right)$ for two time points $t_1$ and $t_2$ [@rasmussen2005]. Similar to the different choices of the basis function for splines, different choices of the covariance kernel lead to different GPs. In this article, we consider the squared-exponential (a.k.a. radial basis function) kernel, which computes the squared distance between points and converts it into a measure of similarity. It is defined as:

$$
C(\lambda) := C\left(t_1, t_2, \sigma, \gamma\right) := \sigma^2 \exp \left(-\frac{||t_1-t_2||^{2}}{2 \gamma^2}\right)
$$

with hyperparameters $\lambda = (\sigma, \gamma)$, expressing the overall scale of GP and the length-scale, respectively [@rasmussen2005]. The advantages of this kernel are that it is computationally efficient and (infinitely) smooth making it a reasonable choice for the purposes of the present article. Here again, $\lambda$ hyperparameters are estimated from the data, along with all other model parameters.

Taken from <https://michael-franke.github.io/Bayesian-Regression/practice-sheets/10c-Gaussian-processes.html>: For a given vector $\mathbf{x}$, we can use the kernel to construct finite multi-variate normal distribution associated with it like so:

$$
\mathbf{x} \mapsto_{G P} \operatorname{MVNormal}(m(\mathbf{x}), k(\mathbf{x}, \mathbf{x}))
$$

where $m$ is a function that specifies the mean for the distribution associated with $\mathbf{x}$. This mapping is essentially the Gaussian process: a systematic association of vectors of arbitrary length with a suitable multi-variate normal distribution.

Low-rank approximate Gaussian processes are of main interest in machine learning and statistics due to the high computational demands of exact Gaussian process models [@riutort-mayol_practical_2023]...

## Objectives

...

# Methods

## M/EEG data simulation

<!--

For simulating EEG data, see <https://github.com/GRousselet/onsetsim> and <https://github.com/unfoldtoolbox/UnfoldSim.jl>...

-->

Following the approach used by @sassenhagen2019 and @rousselet_using_2025, we simulated EEG data stemming from two conditions, one with noise only, and the other with noise + signal. As in previous studies, the noise was generated by superimposing 50 sinusoids at different frequencies, following an EEG-like spectrum [see details and code in @yeung2004]. As in @rousselet_using_2025, the signal was generated from truncated Gaussian with an objective onset at 160 ms, a peak at 250 ms, and an offset at 342 ms. We simulated this signal for 250 timesteps between 0 and 0.5s, akin to & 500 Hz sampling rate. We simulated such data for a group of 20 participants with 50 trials per participant and condition.

```{r eeg-group, echo = FALSE, fig.width = 9, fig.cap = "Some ERPs in two conditions with 50 trials each, for a group of 20 participants."}
# importing R version of Matlab code from Yeung et al. (2004)
source("code/eeg_noise.R")

# importing the ERP template with true onset = 160 ms, F=81, and max at F=126
source("code/erp_template.R")

# importing helper functions
source("code/functions.R")

# to use with the eeg_noise function
meanpower <- unlist(read.table("code/meanpower.txt") )

# defining simulation parameters
n_trials <- 50 # number of trials
n_ppt <- 20 # number of participants
outvar <- 1 # noise variance
srate <- 500 # sampling rate in Hz
ronset <- seq(150, 170, 2) # random onset for each participant

for (P in 1:n_ppt) { # for each participant
    
    # get random onset
    ponset <- sample(ronset, 1)
     
    # find starting point
    st <- which(Xf == ponset)
    
    # pad vector
    temp2 <- c(rep(0, st - 2), erp, rep(0, Nf - st - length(erp) + 2) )
    
    # initialising empty conditions
    cond1 <- matrix(0, nrow = n_trials, ncol = Nf)
    cond2 <- matrix(0, nrow = n_trials, ncol = Nf)
    
    for (T in 1:n_trials) { # for each trial
        
        cond1[T, ] <- temp1 + eeg_noise(frames = Nf, srate = srate, outvar = outvar, meanpower)
        cond2[T, ] <- temp2 + eeg_noise(frames = Nf, srate = srate, outvar = outvar, meanpower)
      
    }
    
    # converting results to dataframe
    temp_df <- data.frame(
        x = rep(Xf, 2*nrow(cond1) ),
        y = c(c(t(cond1) ), c(t(cond2) ) ),
        trial = c(rep(1:n_trials, each = length(Xf) ), rep(1:n_trials, each = length(Xf) ) ),
        condition = factor(rep(c("cond1", "cond2"), each = Nf*n_trials) ),
        participant = paste0("participant_", sprintf("%02d", P) )
        ) %>%
        select(participant, condition, trial, x, y)
    
    # and appending it to previous participants
    if (exists("raw_df") ) {
        
        raw_df <- bind_rows(raw_df, temp_df)
        
    } else {
        
        raw_df <- temp_df
        
    }
    
}

# plotting the data
raw_df %>%
    summarise(y = mean(y), .by = c(participant, condition, x) ) %>%
    ggplot(aes(x, y, colour = condition) ) +
    geom_hline(yintercept = 0, linetype = 2) +
    geom_vline(xintercept = true_onset, linetype = 2) +
    geom_line(show.legend = FALSE) +
    facet_wrap(~participant) +
    labs(x = "Time (ms)", y = "EEG signal (a.u.)")
```

```{r erp-diff, out.width = "75%", fig.cap = "Group-level average difference between conditions (mean +/- standard error of the mean). The 'true' (population value of the) onset is indicated by the vertical dashed line."}
# averaging across participants
group_df <- raw_df %>%
    pivot_wider(names_from = condition, values_from = y, values_fn = mean) %>%
    mutate(y_diff = cond2 - cond1) %>%
    summarise(
        y_mean = mean(y_diff),
        y_sem = sd(y_diff) / sqrt(n() ),
        .by = x
        ) %>%
    mutate(lower = y_mean - y_sem, upper = y_mean + y_sem)

# plotting the data
group_df %>%
    ggplot(aes(x = x, y = y_mean) ) +
    geom_hline(yintercept = 0, linetype = 2) +
    geom_vline(xintercept = true_onset, linetype = 2) +
    geom_ribbon(
        aes(ymin = lower, ymax = upper, colour = NULL),
        alpha = 0.25, show.legend = FALSE
        ) +
    geom_line(show.legend = FALSE) +
    labs(x = "Time (ms)", y = "EEG difference (a.u.)")
```

## Model fitting

Models were fitted using the `brms` package [@brms2017; @brms2018; @nalborczyk2019]...

```{r gam, message = FALSE}
# defining a contrast for condition
contrasts(group_df$condition) <- c(-0.5, 0.5)

# fitting the GAM
gam <- brm(
    # cubic regression splines with k-1 basis functions
    # then we should try s(x, participant, bs = "fs")
    # that is, random factor smooth interactions...
    y ~ condition + s(x, bs = "cr", k = 20, by = condition),
    data = group_df,
    family = gaussian(),
    iter = 5000,
    chains = 4,
    cores = 4,
    file = "models/gam.rds"
    )
```

Now we fit the GP...

```{r gp, message = FALSE}
gp_model <- brm(
    # k refers to the number of basis functions for
    # computing Hilbert-space approximate GPs
    y ~ gp(x, k = 20, by = condition),
    # if k = NA (default), exact GPs are computed
    # y ~ gp(x, by = condition),
    data = group_df,
    family = gaussian(),
    control = list(adapt_delta = 0.99),
    iter = 5000,
    chains = 4,
    cores = 4,
    file = "models/gp.rds"
    )
```

And we plot the posterior predictions...

```{r gam-preds, echo = FALSE}
# defining a function to plot posterior predictions
plot_post_preds <- function (model, data) {
    
    post_preds <- conditional_effects(
        x = model,
        effect = "x:condition",
        method = "posterior_epred",
        re_formula = NULL,
        prob = 0.99
        )[[1]]
  
    post_preds %>%
        ggplot(aes(x = x, y = y, colour = condition, fill = condition) ) +
        geom_hline(yintercept = 0, linetype = 2) +
        geom_point(
            data = data %>% summarise(y = mean(y), .by = c(x, condition) ),
            aes(fill = NULL),
            pch = 21, show.legend = FALSE
            ) +
        geom_line(aes(y = estimate__), show.legend = FALSE) +
        geom_ribbon(
            aes(ymin = lower__, ymax = upper__, colour = NULL),
            alpha = 0.25, show.legend = FALSE
            ) +
        labs(x = "Time (ms)", y = "EEG signal (a.u.)")
  
}
```

```{r gam-gp-preds, fig.width = 8, fig.asp = 0.5, fig.cap = "Posterior predictions of the GAM (left) and GP (right) models."}
# plotting the posterior predictions
plot_post_preds(model = gam, data = group_df) +
    plot_post_preds(model = gp_model, data = group_df)
```

## Posterior probability of difference above 0

We can retrieve the posterior probability of the slope for `condition` at each timestep.

```{r, echo = FALSE, fig.width = 8, fig.asp = 0.5, fig.cap = "Slope for the difference between conditions according to the GAM (left) or the GP (right)."}
# check posterior_smooths()?
# https://www.rdocumentation.org/packages/brms/versions/2.22.0/topics/posterior_smooths.brmsfit
# defining a function to plot posterior slope
plot_post_slope <- function (model, data, eps = 0.1) {
  
  # defining a sequence of x values to make predictions
  x_seq <- crossing(
      x = seq(min(data$x), max(data$x), length.out = 100),
      condition = c("cond1", "cond2")
      ) %>%
      arrange(condition)
  
  # retrieving posterior samples
  posterior_samples <- posterior_epred(object = model, newdata = x_seq)
  
  # computing the difference between cond2 and cond1
  posterior_samples <- posterior_samples[, 101:200] - posterior_samples[, 1:100] 
  
  # computing the probability that y is above 0
  prob_y_above_0 <- data.frame(
      x = seq(min(data$x), max(data$x), length.out = 100)
      ) %>%
      mutate(
          m = colMeans(posterior_samples),
          lower = apply(
              X = posterior_samples,
              MARGIN = 2, FUN = quantile, probs = 0.025
              ),
          upper = apply(
              X = posterior_samples,
              MARGIN = 2, FUN = quantile, probs = 0.975
              )
          )
  
  # plotting it
  prob_y_above_0 %>%
        ggplot(aes(x = x, y = m) ) +
        geom_hline(yintercept = 0, linetype = 2) +
        geom_line() +
        geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
        # theme_light(base_size = 12) +
        labs(x = "Time (ms)", y = expression(Pr(beta~"|"~data, model) ) )
  
}

# using the function with model
plot_post_slope(model = gam, data = group_df, eps = 0.1) +
    plot_post_slope(model = gp_model, data = group_df, eps = 0.1)
```

We can also compute the posterior probability of the slope for `condition` being above 0 (@fig-post-prob-test).

```{r fig-post-prob-test, echo = FALSE, fig.width = 8, fig.asp = 0.5, fig.cap = "Posterior probability of the EEG signal being above 0+eps according to the GAM (left) and the GP (right)."}
# defining a function to plot posterior prob of slope above 0
plot_post_test <- function (model, data, eps = 0.1) {
    
    # defining a sequence of x values to make predictions
    x_seq <- crossing(
        x = seq(min(data$x), max(data$x), length.out = 100),
        condition = c("cond1", "cond2")
        ) %>%
        arrange(condition)
  
    # retrieving posterior samples
    posterior_samples <- posterior_epred(object = model, newdata = x_seq)
    
    # computing the difference between cond2 and cond1
    posterior_samples <- posterior_samples[, 101:200] - posterior_samples[, 1:100]
    
    # computing the probability that y is above 0
    prob_y_above_0 <- data.frame(
        x = x_seq$x,
        m = colMeans(posterior_samples > (0 + eps) ),
        lower = apply(
            X = posterior_samples > (0 + eps),
            MARGIN = 2, FUN = quantile, probs = 0.025
            ),
        upper = apply(
            X = posterior_samples > (0 + eps),
            MARGIN = 2, FUN = quantile, probs = 0.975
            )
        )
    
    # plotting it
    prob_y_above_0 %>%
    ggplot(aes(x = x, y = m) ) +
    geom_hline(yintercept = 0.5, linetype = 2) +
    geom_line() +
    # geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
    # theme_light(base_size = 12) +
    # labs(x = "Time (ms)", y = "Pr(EEG>0)|data)")
    labs(x = "Time (ms)", y = expression(Pr(beta>0~"|"~data, model) ) )
  
}

# using the function with the two models
plot_post_test(model = gam, data = group_df, eps = 0.1) +
    plot_post_test(model = gp_model, data = group_df, eps = 0.1)
```

We can also express this as the ratio of posterior probabilities (i.e., $p/(1-p)$) and visualise the timecourse of this ratio superimposed with the conventional BF thresholds (@fig-post-prob-ratio).

```{r fig-post-prob-ratio, echo = FALSE, fig.width = 8, fig.asp = 0.5, fig.cap = "Ratio of posterior probability according to the GAM (left) and the GP (right). Timesteps above threshold (>10) are highlighted in green."}
# defining a sequence of x values to make predictions
n_approx <- 1000
x_seq <- crossing(
    x = seq(min(group_df$x), max(group_df$x), length.out = n_approx),
    condition = c("cond1", "cond2")
    ) %>%
    arrange(condition)

# retrieving posterior samples
posterior_samples <- posterior_epred(object = gam, newdata = x_seq)

# computing the difference between cond2 and cond1
posterior_samples <- posterior_samples[, (ncol(posterior_samples)/2+1):ncol(posterior_samples)] -
    posterior_samples[, 1:(ncol(posterior_samples)/2)]

# sanity checks
# ts.plot(colMeans(posterior_samples) )
# ts.plot(apply(X = posterior_samples, MARGIN = 2, FUN = mean) )
# ts.plot(apply(X = posterior_samples, MARGIN = 2, FUN = sd) )
# mean(apply(X = posterior_samples, MARGIN = 2, FUN = sd) )

# computing the probability that y is above 0
eps <- 0.05
prob_y_above_0 <- data.frame(
    x = seq(min(group_df$x), max(group_df$x), length.out = n_approx)
    ) %>%
    mutate(post_prob = colMeans(posterior_samples) ) %>%
    mutate(m = colMeans(posterior_samples > eps) ) %>%
    mutate(prob_ratio = m / (1 - m) )

# printing the identified clusters
# the signal was a truncated Gaussian defining an objective onset at 160 ms,
# a maximum at 250 ms, and an offset at 342 ms.
threshold <- 10
exceeding_times_gam <- prob_y_above_0 %>%
    dplyr::filter(prob_ratio > threshold) %>%
    summarise(cluster_onset = min(x), cluster_offset = max(x) ) %>%
    mutate(
        cluster_peak = prob_y_above_0 %>%
            dplyr::filter(post_prob == max(post_prob) ) %>%
            pull(x)
        ) %>%
    mutate(true_onset = 160, true_peak = 250, true_offset = 342) %>%
    mutate(model = "GAM")
    
# plotting it
gam_ratio_plot <- prob_y_above_0 %>%
    mutate(above_thres = ifelse(prob_ratio > threshold, 1, NA) ) %>%
    ggplot(aes(x = x, y = prob_ratio) ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    geom_hline(yintercept = 3, linetype = "dashed", color = "darkred") +
    geom_hline(yintercept = 1/3, linetype = "dashed", color = "darkred") +
    geom_hline(yintercept = 10, linetype = "dashed", color = "red") +
    geom_hline(yintercept = 1/10, linetype = "dashed", color = "red") +
    geom_hline(yintercept = 100, linetype = "dashed", color = "orangered") +
    geom_hline(yintercept = 1/100, linetype = "dashed", color = "orangered") +
    geom_line() +
    geom_point(
        data = . %>% dplyr::filter(!is.na(above_thres) ),
        aes(y = threshold),
        colour = "darkgreen",
        shape = 15,
        size = 3,
        na.rm = TRUE
        ) +
    scale_y_log10(labels = label_log(digits = 2), limits = c(NA, 1e4) ) +
    labs(
        x = "Time (ms)",
        y = expression(Pr(beta>0~"|"~data, model) / (1 - Pr(beta>0~"|"~data) ) )
        )

# retrieving posterior samples
posterior_samples <- posterior_epred(object = gp_model, newdata = x_seq)

# computing the difference between cond2 and cond1
posterior_samples <- posterior_samples[, (ncol(posterior_samples)/2+1):ncol(posterior_samples)] -
    posterior_samples[, 1:(ncol(posterior_samples)/2)]

# computing the probability that y is above 0
eps <- 0.05
prob_y_above_0 <- data.frame(
    x = seq(min(group_df$x), max(group_df$x), length.out = n_approx)
    ) %>%
    mutate(post_prob = colMeans(posterior_samples) ) %>%
    mutate(m = colMeans(posterior_samples > eps) ) %>%
    mutate(prob_ratio = m / (1 - m) )

# printing the identified clusters
# the signal was a truncated Gaussian defining an objective onset at 160 ms,
# a maximum at 250 ms, and an offset at 342 ms.
threshold <- 10
exceeding_times_gp <- prob_y_above_0 %>%
    dplyr::filter(prob_ratio > threshold) %>%
    summarise(cluster_onset = min(x), cluster_offset = max(x) ) %>%
    mutate(
        cluster_peak = prob_y_above_0 %>%
            dplyr::filter(post_prob == max(post_prob) ) %>%
            pull(x)
        ) %>%
    mutate(true_onset = 160, true_peak = 250, true_offset = 342) %>%
    mutate(model = "GP")

# plotting it
gp_ratio_plot <- prob_y_above_0 %>%
    mutate(above_thres = ifelse(prob_ratio > threshold, 1, NA) ) %>%
    ggplot(aes(x = x, y = prob_ratio) ) +
    geom_hline(yintercept = 1, linetype = "dashed") +
    geom_hline(yintercept = 3, linetype = "dashed", color = "darkred") +
    geom_hline(yintercept = 1/3, linetype = "dashed", color = "darkred") +
    geom_hline(yintercept = 10, linetype = "dashed", color = "red") +
    geom_hline(yintercept = 1/10, linetype = "dashed", color = "red") +
    geom_hline(yintercept = 100, linetype = "dashed", color = "orangered") +
    geom_hline(yintercept = 1/100, linetype = "dashed", color = "orangered") +
    geom_line() +
    geom_point(
        data = . %>% dplyr::filter(!is.na(above_thres) ),
        aes(y = threshold),
        colour = "darkgreen",
        shape = 15,
        size = 3,
        na.rm = TRUE
        ) +
    scale_y_log10(labels = label_log(digits = 2), limits = c(NA, 1e4) ) +
    labs(
        x = "Time (ms)",
        y = expression(Pr(beta>0~"|"~data, model) / (1 - Pr(beta>0~"|"~data) ) )
        )

# plotting results for the two models
gam_ratio_plot + gp_ratio_plot

# printing the results
# bind_rows(exceeding_times_gam, exceeding_times_gp) %>%
#     mutate(across(.cols = where(is.numeric), .fns = ~round(.x, 2) ) ) %>%
#     relocate(model, .before = cluster_onset)
```

\newpage

## Error properties of the proposed approach

Below we are plotting the error function (where the error is computed as $|\hat{\theta}-\theta|$) for both the onset and offset values of the ERP difference, according to various `eps` and `threshold` values. Remember that the signal is generated from a truncated Gaussian defining an objective onset at 160 ms, a maximum at 250 ms, and an offset at 342 ms. @fig-onset-error shows that the GP model can *exactly* recover the true onset and offset values, given some reasonable choice of `eps` and `threshold` values.

```{r fig-onset-error, echo = FALSE, dpi = 300, fig.width = 8, fig.asp = 0.5, fig.cap = "Error function of onset (left) and offset (right) estimation according to various eps and threshold values (according to the GP model). Minimum error values are indicated by red crosses."}
# defining values of eps and threshold to test
eps_values <- seq(from = 0, to = 0.2, by = 0.01)
threshold_values <- seq(from = 1, to = 50, by = 1)
n_approx <- n_distinct(group_df$x)

# initialising results dataframe
results <- crossing(eps = eps_values, threshold = threshold_values) %>%
    mutate(
        estimated_onset = NA, estimated_peak = NA, estimated_offset = NA,
        error_onset = NA, error_peak = NA, error_offset = NA
        )

# generating a grid of values to compute predictions for
x_seq <- crossing(
    x = seq(min(group_df$x), max(group_df$x), length.out = n_approx*2-1),
    condition = c("cond1", "cond2")
    ) %>%
    arrange(condition)

# retrieving posterior samples
posterior_samples <- posterior_epred(object = gp_model, newdata = x_seq)

# computing the difference between cond2 and cond1
posterior_samples <- posterior_samples[, (ncol(posterior_samples)/2+1):ncol(posterior_samples)] -
    posterior_samples[, 1:(ncol(posterior_samples)/2)]

# looping over different values of eps and threshold
for (i in seq_len(nrow(results) ) ) {
    
    # retrieving current eps and threshold values
    eps <- results$eps[i]
    threshold <- results$threshold[i]
    
    # computing probability metrics with the current eps value
    prob_y_above_0 <- data.frame(
        x = seq(min(group_df$x), max(group_df$x), length.out = n_approx*2-1)
        ) %>%
    mutate(post_prob = colMeans(posterior_samples) ) %>%
    mutate(m = colMeans(posterior_samples > eps) ) %>%
    mutate(prob_ratio = m / (1 - m) )
    
    # finding onset, offset, and peak for the current threshold
    exceeding_times <- prob_y_above_0 %>%
        dplyr::filter(prob_ratio > threshold) %>%
        summarise(
            cluster_onset = min(x, na.rm = TRUE),
            cluster_offset = max(x, na.rm = TRUE)
            ) %>%
        mutate(
            cluster_peak = prob_y_above_0 %>%
            dplyr::filter(post_prob == max(post_prob, na.rm = TRUE) ) %>%
            pull(x)
            ) %>%
        mutate(true_onset = 160, true_peak = 250, true_offset = 342)
    
    # storing the results in the dataframe
    if (nrow(exceeding_times) > 0) {
        
        results$estimated_onset[i] <- exceeding_times$cluster_onset
        results$estimated_peak[i] <- exceeding_times$cluster_peak
        results$estimated_offset[i] <- exceeding_times$cluster_offset
        
        # computing errors
        results$error_onset[i] <- abs(
            exceeding_times$cluster_onset - exceeding_times$true_onset
            )
        results$error_peak[i] <- abs(
            exceeding_times$cluster_peak - exceeding_times$true_peak
            )
        results$error_offset[i] <- abs(
            exceeding_times$cluster_offset - exceeding_times$true_offset
            )
        
    }
    
}

# plotting the results
onset_plot <- results %>%
    ggplot(aes(x = eps, y = threshold, fill = error_onset) ) +
    geom_tile(show.legend = FALSE) +
    geom_point(
        data = results %>% dplyr::filter(error_onset == min(error_onset, na.rm = TRUE) ),
        aes(x = eps, y = threshold),
        color = "orangered", size = 2, shape = 4,
        show.legend = FALSE
        ) +
    scale_x_continuous(expand = c(0, 0) ) +
    scale_y_continuous(expand = c(0, 0) ) +
    scale_fill_gradientn(colors = rev(met.brewer("Hokusai1") ) ) +
    # scale_fill_viridis_c() +
    # scale_y_log10(labels = label_log(digits = 2) ) +
    # theme_light(base_size = 10) +
    labs(
        title = "Onset error",
        x = "eps",
        y = "Threshold",
        fill = "Error"
        )

offset_plot <- results %>%
    ggplot(aes(x = eps, y = threshold, fill = error_offset) ) +
    geom_tile(show.legend = FALSE) +
    geom_point(
        data = results %>% dplyr::filter(error_offset == min(error_offset, na.rm = TRUE) ),
        aes(x = eps, y = threshold),
        color = "orangered", size = 2, shape = 4,
        show.legend = FALSE
        ) +
    scale_x_continuous(expand = c(0, 0) ) +
    scale_y_continuous(expand = c(0, 0) ) +
    scale_fill_gradientn(colors = rev(met.brewer("Hokusai1") ) ) +
    # theme_light(base_size = 10) +
    labs(
        title = "Offset error",
        x = "eps",
        y = "Threshold",
        fill = "Error"
        )

# combining the plots
onset_plot + offset_plot

# displaying best parameters values (according to onset error)
# library(flextable)
results %>%
    dplyr::select(-estimated_peak, -error_peak) %>%
    arrange(error_onset) %>%
    data.frame() %>%
    head()

# displaying best parameters values (according to offset error)
# library(flextable)
results %>%
    dplyr::select(-estimated_peak, -error_peak) %>%
    arrange(error_offset) %>%
    data.frame() %>%
    head()
```

\newpage

## Using summary statistics of ERPs

Next we fit a hierarchical GAM using summary statistics of ERPs (mean and SD) at the participant level (similar to what is done in meta-analysis).

```{r meta-gam, message = FALSE}
# averaging across participants
summary_df <- raw_df %>%
    summarise(
        eeg = mean(y),
        eeg_sd = sd(y),
        .by = c(participant, condition, x)
        )

# defining a contrast for condition
contrasts(summary_df$condition) <- c(-0.5, 0.5)

# fitting the GAM
meta_gam <- brm(
    # using by-participant SD of ERPs across trials
    eeg | se(eeg_sd) ~
        condition + s(x, bs = "cr", k = 10, by = condition) +
        (1 | participant),
    data = summary_df,
    family = gaussian(),
    iter = 5000,
    chains = 4,
    cores = 4,
    file = "models/meta_gam.rds"
    )
```

```{r meta-gam-preds, fig.cap = "Hierarchical GAM posterior predictions."}
# plotting the posterior predictions
plot(
    conditional_effects(x = meta_gam, effect = "x:condition"),
    points = FALSE, theme = theme_light(), plot = FALSE
    )[[1]] +
    labs(x = "Time (ms)", y = "EEG signal (a.u.)")
```

```{r meta-gp, eval = FALSE, message = FALSE}
# fitting the GP
meta_gp <- brm(
    # using by-participant SD of ERPs across trials
    eeg | se(eeg_sd) ~
        condition + gp(x, k = 20, by = condition) +
        (1 | participant),
    data = summary_df,
    family = gaussian(),
    control = list(adapt_delta = 0.95, max_treedepth = 20),
    iter = 5000,
    chains = 4,
    cores = 4,
    file = "models/meta_gp.rds"
    )
```

```{r meta-gp-preds, eval = FALSE, fig.cap = "Hierarchical GP posterior predictions."}
# plotting the posterior predictions
plot(
    conditional_effects(x = meta_gp, effect = "x:condition"),
    points = FALSE, theme = theme_light(), plot = FALSE
    )[[1]] +
    labs(x = "Time (ms)", y = "EEG signal (a.u.)")
```

## Application to 1D decoding results (accuracy over time)

Assume we have M/EEG data and we conducted time-resolved multivariate pattern analysis (MVPA), also known as decoding. As a result, we have a timecourse of decoding accuracies (e.g., ROC AUC), bounded between 0 and 1, per participant (@fig-sim-decoding).

```{r fig-sim-decoding, echo = FALSE, out.width = "75%", fig.cap = "Exemplary (simulated) group-level average timecourse of binary decoding accuracy (ROC AUC)."}
# simulating decoding accuracies (ROC AUC)
n_participants <- 20
n_timepoints <- 240
timepoints <- seq(from = 0.1, to = 1.3, length.out = n_timepoints) 

# defining a function to generate AUC using a Beta distribution
simulate_auc <- function (
        timepoints, onset = 0.1,
        peak_time = 0.4, sigma = 0.5, amplitude = 30
        ) {
  
    # ensuring timepoints - onset > 0
    adjusted_time <- timepoints - onset + 0.001
    
    # log-normal peak function with right skew
    log_peak <- log(peak_time - onset + 0.001)
    log_t <- log(adjusted_time)
    
    # computing right-skewed alpha with log-normal peak
    alpha_t <- 10 + amplitude * exp(-((log_t - log_peak)^2) / (2 * sigma^2) )
    
    # keeping baseline at chance level (0.5)
    beta_t <- 10
    
    # simulate Beta-distributed AUC values
    auc <- rbeta(length(timepoints), shape1 = alpha_t, shape2 = beta_t)
    
    # returning the AUC
    return (auc)
  
}

# simulating data for all participants
decoding_data <- data.frame(
    participant = rep(1:n_participants, each = n_timepoints),
    time = rep(timepoints, times = n_participants),
    auc = unlist(lapply(1:n_participants, function (i) {
        simulate_auc(
            timepoints,
            onset = 0.1,
            # variable peak time
            peak_time = runif(1, 0.6, 0.7),
            # variable spread
            sigma = runif(1, 0.1, 0.3),
            # variable peak amplitude
            amplitude = runif(1, 30, 40)
            )})
        )
    ) %>%
    mutate(time = time - 0.3)
    
# computing group mean and 95% quantile interval
group_data <- decoding_data %>%
    group_by(time) %>%
    summarise(
        mean_auc = mean(auc),
        lower = quantile(auc, 0.025),
        upper = quantile(auc, 0.975)
        )

# plotting it
group_data %>%
    ggplot(aes(x = time, y = mean_auc) ) +
    geom_hline(yintercept = 0.5, linetype = "dashed") +
    geom_vline(xintercept = 0.0, linetype = "dashed") +
    geom_ribbon(aes(ymin = lower, ymax = upper), fill = "steelblue", alpha = 0.2) +
    geom_line(color = "steelblue", size = 1) +
    ylim(0, 1) +
    labs(x = "Time (s)", y = "Decoding accuracy (ROC AUC)")
```

```{r mne-decoding, out.width = "75%", eval = FALSE}
# loading the reticulate package
library(reticulate)

# importing the numpy and mne python modules
np <- import("numpy")
mne <- import("mne")
sklearn <- import("sklearn")

# defining the function in R (it will be executed in Python)
mne_decoding <- function (X, labels, ncores = 1) {
    
    # converting R dataframe to NumPy array (reshaping if needed)
    # X should be a matrix before conversion
    X_np <- np$array(X)
    
    if (length(dim(X_np) ) == 2) {
        
        # adding a second dimension (channels) if missing
        X_np <- np$expand_dims(X_np, axis = as.integer(1) )
        
    }
  
    # defining the classifier
    clf <- sklearn$linear_model$LogisticRegression(solver = "liblinear")
    
    # sliding the estimator on all time frames
    time_decod <- mne$decoding$SlidingEstimator(
        clf, n_jobs = as.integer(ncores),
        scoring = "roc_auc", verbose = TRUE
        )
    
    # or using N-fold cross-validation
    scores <- mne$decoding$cross_val_multiscore(
        time_decod,
        X_np,
        labels,
        cv = as.integer(4),
        n_jobs = as.integer(ncores),
        verbose = TRUE
        )
    
    # returning the scores (averaged over CV folds)
    return (scores)
    
}

# listing all participants
participants <- unique(raw_df$participant)

# initialising empty decoding results
group_decoding_scores <- data.frame()

# running decoding for each participant
for (ppt in participants) {
    
    # printing progress
    print(ppt)
    
    # retrieve data from one participant
    ppt_data <- raw_df %>%
        filter(participant == ppt) %>%
        select(-participant) %>%
        pivot_wider(names_from = x, values_from = y) %>%
        select(-condition, -trial)
        
    # extracting the labels
    labels <- raw_df %>%
        filter(participant == ppt) %>%
        select(-participant) %>%
        pivot_wider(names_from = x, values_from = y) %>%
        pull(condition) %>%
        as.numeric()
    
    # extracting the timesteps
    timesteps <- raw_df %>%
        filter(participant == ppt) %>%
        select(-participant) %>%
        pull(x) %>%
        unique()
    
    # running the decoding
    decoding_scores <- data.frame(
        mne_decoding(X = ppt_data, labels = labels-1)
        ) %>%
        # computing the average over CV folds
        summarise(across(where(is.numeric), mean) )
    
    # appending to previous results
    group_decoding_scores <- bind_rows(group_decoding_scores, decoding_scores)
    
}

# saving the scores
saveRDS(object = group_decoding_scores, file = "results/decoding_scores.rds")
```

```{r, out.width = "75%", fig.cap = "Exemplary group-level average timecourse of binary decoding accuracy (ROC AUC). Decoding was performed using MNE-Python."}
# importing the decoding scores
group_decoding_scores <- readRDS(file = "results/decoding_scores.rds")

# extracting the timesteps
timesteps <- raw_df %>%
    # filter(participant == ppt) %>%
    # select(-participant) %>%
    pull(x) %>%
    unique()

# plotting it
group_decoding_scores %>%
    t() %>%
    data.frame() %>%
    mutate(
        mean = rowMeans(across(1:20) ),
        se = apply(across(1:20), 1, function (x) sd(x) / sqrt(length(x) ) )
        ) %>%
    mutate(lower = mean - se, upper = mean + se) %>%
    mutate(time = timesteps) %>%
    ggplot(aes(x = time, y = mean) ) +
    geom_hline(yintercept = 0.5, linetype = "dashed") +
    geom_ribbon(aes(ymin = lower, ymax = upper), fill = "steelblue", alpha = 0.2) +
    geom_line(color = "steelblue", size = 0.8) +
    labs(x = "Time (s)", y = "Decoding accuracy (ROC AUC)")
```

Now, we want to *test* whether the group-level average decoding accuracy is above chance (i.e., 0.5) at each timestep. We use a similar GAM/GP as previously, but we replace the $\mathrm{Normal}$ likelihood function by a $\mathrm{Beta}$ one to account for the bounded nature of AUC values (between 0 and 1).

```{r gam-decoding, message = FALSE}
# fitting the GAM
decoding_gam <- brm(
    auc ~ s(time, bs = "cr", k = 10),
    data = decoding_data,
    family = Beta(),
    iter = 5000,
    chains = 4,
    cores = 4,
    file = "models/decoding_gam.rds"
    )
```

```{r gp-decoding, message = FALSE}
# fitting the GP
decoding_gp <- brm(
    auc ~ gp(time, k = 20),
    data = decoding_data,
    family = Beta(),
    control = list(adapt_delta = 0.9),
    iter = 5000,
    chains = 4,
    cores = 4,
    file = "models/decoding_gp.rds"
    )
```

```{r decoding-preds, echo = FALSE, fig.width = 9, fig.asp = 0.5, fig.cap = "Posterior predictions of the GAM (left) and GP (right) fitted on decoding accuracy over time."}
# plotting the posterior predictions
gam_decoding_preds <- plot(
    conditional_effects(x = decoding_gam, prob = 0.99),
    points = TRUE,
    point_args = list(size = 1, pch = 21, colour = "grey"),
    line_args = list(colour = "black"),
    theme = theme_light(), plot = FALSE
    )[[1]] +
    geom_hline(yintercept = 0.5, linetype = 2) +
    geom_vline(xintercept = 0.0, linetype = 2) +
    ylim(0, 1) +
    labs(x = "Time (s)", y = "Decoding accuracy (ROC AUC)")

gp_decoding_preds <- plot(
    conditional_effects(x = decoding_gp, prob = 0.99),
    points = TRUE,
    point_args = list(size = 1, pch = 21, colour = "grey"),
    line_args = list(colour = "black"),
    theme = theme_light(), plot = FALSE
    )[[1]] +
    geom_hline(yintercept = 0.5, linetype = 2) +
    geom_vline(xintercept = 0.0, linetype = 2) +
    ylim(0, 1) +
    labs(x = "Time (s)", y = "Decoding accuracy (ROC AUC)")

# combining the two plots
gam_decoding_preds + gp_decoding_preds
```

Next, we plot the posterior probability of decoding accuracy being above chance level (plus some epsilon) (@fig-decoding-post).

```{r fig-decoding-post, echo = FALSE, fig.width = 9, fig.asp = 0.5, fig.cap = "Posterior probability of decoding accuracy being above chance level according to the GAM (left) or the GP (right)."}
# defining a function to plot posterior prob of slope above 0
plot_post_decoding <- function (model, data, chance_level = 0.5, eps = 0.1) {
    
    # defining a sequence of x values to make predictions
    x_seq <- crossing(time = seq(min(data$time), max(data$time), length.out = 100) )
  
    # retrieving posterior samples
    posterior_samples <- posterior_epred(object = model, newdata = x_seq)
    
    # computing the probability that y is above 0
    prob_y_above_0 <- data.frame(
        time = x_seq$time,
        m = colMeans(posterior_samples > (chance_level + eps) ),
        lower = apply(
            X = posterior_samples > (chance_level + eps),
            MARGIN = 2, FUN = quantile, probs = 0.025
            ),
        upper = apply(
            X = posterior_samples > (chance_level + eps),
            MARGIN = 2, FUN = quantile, probs = 0.975
            )
        )
    
    # plotting it
    prob_y_above_0 %>%
    ggplot(aes(x = time, y = m) ) +
    geom_hline(yintercept = chance_level, linetype = 2) +
    geom_vline(xintercept = 0, linetype = 2) +
    geom_line() +
    # geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
    labs(x = "Time (s)", y = expression(Pr(AUC>chance~"|"~data, model) ) )
  
}

# using the function with the two models
plot_post_decoding(
    model = decoding_gam, data = decoding_data,
    chance_level = 0.5, eps = 0.1
    ) +
    plot_post_decoding(
        model = decoding_gp, data = decoding_data,
        chance_level = 0.5, eps = 0.1
        ) 
```

```{r fig-decoding-ratio, echo = FALSE, fig.width = 9, fig.asp = 0.5, fig.cap = "Ratio of posterior probabilities of decoding accuracy being above chance level according to the GAM (left) or the GP (right)."}
# defining a function to plot posterior prob of slope above 0
plot_post_decoding_ratio <- function (model, data, chance_level = 0.5, eps = 0.1) {
    
    # defining a sequence of x values to make predictions
    # x_seq <- crossing(time = seq(min(data$time), max(data$time), length.out = 100) )
    x_seq <- data.frame(time = data$time)
    
    # retrieving posterior samples
    posterior_samples <- posterior_epred(object = model, newdata = x_seq)
    
    # computing the probability that y is above 0
    prob_y_above_0 <- data.frame(time = data$time) %>%
        mutate(m = colMeans(posterior_samples > (chance_level + eps) ) ) %>%
        mutate(prob_ratio = m / (1 - m) )
    
    # printing the identified clusters
    threshold <- 10
    exceeding_times <- prob_y_above_0 %>%
        dplyr::filter(prob_ratio > threshold) %>%
        summarise(cluster_onset = min(time), cluster_offset = max(time) )
    print(exceeding_times)
    
    # plotting it
    prob_y_above_0 %>%
        mutate(above_thres = ifelse(prob_ratio > threshold, 1, NA) ) %>%
        ggplot(aes(x = time, y = prob_ratio) ) +
        geom_hline(yintercept = 1, linetype = "dashed") +
        geom_hline(yintercept = 3, linetype = "dashed", color = "darkred") +
        geom_hline(yintercept = 1/3, linetype = "dashed", color = "darkred") +
        geom_hline(yintercept = 10, linetype = "dashed", color = "red") +
        geom_hline(yintercept = 1/10, linetype = "dashed", color = "red") +
        geom_hline(yintercept = 100, linetype = "dashed", color = "orangered") +
        geom_hline(yintercept = 1/100, linetype = "dashed", color = "orangered") +
        geom_vline(xintercept = 0, linetype = 2) +
        geom_line() +
        geom_point(
            data = . %>% dplyr::filter(!is.na(above_thres) ),
            aes(y = threshold),
            colour = "darkgreen",
            shape = 15,
            size = 3,
            na.rm = TRUE
            ) +
        scale_y_log10(labels = label_log(digits = 2), limits = c(NA, 1e4) ) +
        labs(
            x = "Time (s)",
            y = expression(
                Pr(AUC>chance~"|"~data, model) / (1 - Pr(AUC>chance~"|"~data, model) )
                )
            )
  
}

# using the function with the two models
plot_post_decoding_ratio(
    model = decoding_gam, data = decoding_data,
    chance_level = 0.5, eps = 0.05
    ) +
    plot_post_decoding_ratio(
        model = decoding_gp, data = decoding_data,
        chance_level = 0.5, eps = 0.05
        )
```

\newpage

## Application to 2D decoding results (cross-temporal generalisation)

Assume we have M/EEG data and we have conducted cross-temporal generalisation analyses [@king2014]. As a result, we have a 2D matrix where each element contains the decoding accuracy (e.g., ROC AUC) of a classifier trained at timestep $\text{training}_{i}$ and tested at timestep $\text{testing}_{j}$ (@fig-sim-timegen).

```{r fig-sim-timegen, echo = FALSE, dpi = 300, fig.cap = "Exemplary (simulated) group-level average cross-temporal generalisation matrix of decoding performance (ROC AUC)."}
# number of participants
n_participants <- 10

# number of timepoints
# n_timepoints <- 240 # (1.2s at 200Hz)
n_timepoints <- 60 # (1.2s at 50Hz)
timepoints <- seq(from = -0.2, to = 1, length.out = n_timepoints)

# smooth onset and offset parameters
decode_onset <- 0.2
decode_offset <- 0.3

# smoothness of onset/offset
sigma_smooth <- 0.05

# generating participant-specific cross-temporal generalisation matrices
timegen_data <- tibble()

# for each participant
for (p in 1:n_participants) {
  
    # adding variability in peak amplitude and width per participant
    peak_variability <- runif(1, 30, 50) # random peak strength (higher = stronger decoding)
    smooth_variability <- runif(1, 0.04, 0.06) # random smoothness variation
    onset_variability <- runif(1, -0.05, 0.05) # small jitter in onset time
    offset_variability <- runif(1, -0.05, 0.05) # small jitter in offset time
    
    # computing smooth transition function (soft onset and offset with participant variation)
    decode_window <- outer(timepoints, timepoints, function (t1, t2) {
        
        # smooth onset
        onset_factor <- 1 /
            (1 + exp(-(t1 - (decode_onset + onset_variability) ) / sigma_smooth) )
        
        # smooth offset
        offset_factor <- 1 /
            (1 + exp((t1 - (decode_offset + offset_variability)) / sigma_smooth) )
        
        # diagonal Gaussian
        onset_factor * offset_factor * exp(-((t1 - t2)^2) / (2 * smooth_variability^2) )
        
    })
    
    # defining smooth alpha and beta parameters for Beta distribution
    base_alpha <- 10
    peak_alpha <- peak_variability
    alpha_matrix <- base_alpha + peak_alpha * decode_window
    beta_matrix <- base_alpha
    
    # generating AUC values using the Beta distribution
    auc_matrix_beta <- matrix(
        rbeta(n_timepoints^2, shape1 = alpha_matrix, shape2 = beta_matrix),
        nrow = n_timepoints, ncol = n_timepoints
        )
    
    # converting to long format for plotting
    temp_data <- expand.grid(
        train_time = timepoints, test_time = timepoints
        ) %>%
        mutate(auc = as.vector(auc_matrix_beta), participant = p)
    
    # storing results
    timegen_data <- bind_rows(timegen_data, temp_data)
    
}

# plotting cross-temporal generalization matrix
timegen_data %>%
    summarise(auc = mean(auc), .by = c(train_time, test_time) ) %>%
    ggplot(aes(x = train_time, y = test_time, fill = auc) ) +
    geom_tile() +
    geom_vline(xintercept = 0, linetype = 2, linewidth = 0.5) +
    geom_hline(yintercept = 0, linetype = 2, linewidth = 0.5) +
    geom_abline(slope = 1, intercept = 0, linetype = 2, linewidth = 0.5) +
    scale_x_continuous(expand = c(0, 0) ) +
    scale_y_continuous(expand = c(0, 0) ) + 
    coord_fixed() +
    scale_fill_scico(palette = "vik", midpoint = 0.5, name = "AUC") +
    labs(x = "Testing time (s)", y = "Training time (s)")
```

Now, we want to test whether and when decoding performance is above chance level (0.5 for a binary decoding task). These two models are computationally heavier to fit (more observations and 2D smooth functions)...

```{r gam-gp-timegen, eval = FALSE, message = FALSE}
# fitting a GAM with two temporal dimensions
timegen_gam <- brm(
    # 2D thin-plate spline (tp) to model smooth interactions between training and testing time
    # auc ~ s(train_time, test_time, bs = "tp", k = 10),
    auc ~ t2(train_time, test_time, bs = "tp", k = 10),
    data = timegen_data,
    family = Beta(),
    iter = 2000,
    chains = 4,
    cores = 4,
    file = "models/timegen_gam_t2.rds"
    )

# fitting a GP with two temporal dimensions
timegen_gp <- brm(
    auc ~ gp(train_time, test_time, k = 20),
    # data = timegen_data %>% mutate(auc_c = scale(x = auc, center = TRUE, scale = FALSE) ),
    data = timegen_data,
    family = Beta(),
    control = list(adapt_delta = 0.95, max_treedepth = 20),
    iter = 2000,
    chains = 4,
    cores = 4,
    file = "models/timegen_gp.rds"
    )
```

```{r gam-timegen-preds, eval = FALSE, echo = FALSE, fig.cap = "Posterior predictions of the GAM fitted on decoding accuracy over time."}
# plotting the posterior predictions
plot(
    conditional_effects(x = timegen_gam, prob = 0.95),
    points = FALSE,
    # point_args = list(size = 1, pch = 21, colour = "grey"),
    # line_args = list(colour = "black"),
    method = "posterior_epred",
    surface = TRUE,
    theme = theme_light(),
    plot = TRUE
    )#[[1]] +
    # geom_hline(yintercept = 0.5, linetype = 2) +
    # geom_vline(xintercept = 0.0, linetype = 2) +
    # ylim(0, 1) +
    # labs(x = "Time (s)", y = "Decoding accuracy (ROC AUC)")

# posterior predictive checks
pp_check(timegen_gam)
```

```{r gam-timegen-post-preds, echo = FALSE, fig.width = 8, fig.asp = 0.6, fig.cap = "Posterior probability of decoding accuracy being above chance level (2D GAM)."}
# defining a function to plot posterior prob of slope above 0
plot_post_timegen <- function (model, data, chance_level = 0.5, eps = 0.1) {
    
    # defining a sequence of x values to make predictions
    preds_conds <- crossing(
        train_time = unique(data$train_time)[c(TRUE, FALSE)],
        test_time = unique(data$test_time)[c(TRUE, FALSE)]
        )
    
    # retrieving posterior predictions
    post_preds <- conditional_effects(
        x = model,
        conditions = preds_conds,
        method = "posterior_epred",
        prob = 0.95,
        ndraws = 100
        )[[1]]
    
    # plotting cross-temporal generalization matrix
    post_preds_plot <- post_preds %>%
        summarise(auc = mean(estimate__), .by = c(train_time, test_time) ) %>%
        ggplot(aes(x = train_time, y = test_time, fill = auc) ) +
        geom_tile() +
        geom_vline(xintercept = 0, linetype = 2, linewidth = 0.5) +
        geom_hline(yintercept = 0, linetype = 2, linewidth = 0.5) +
        geom_abline(slope = 1, intercept = 0, linetype = 2, linewidth = 0.5) +
        scale_x_continuous(expand = c(0, 0) ) +
        scale_y_continuous(expand = c(0, 0) ) + 
        coord_fixed() +
        scale_fill_scico(palette = "vik", midpoint = 0.5, name = "AUC") +
        # theme_light() +
        labs(x = "Testing time (s)", y = "Training time (s)")

    # retrieving posterior samples
    posterior_samples <- posterior_epred(object = model, newdata = preds_conds)
    
    # computing the probability that y is above 0
    prob_y_above_0 <- preds_conds %>%
        mutate(post_prob = colMeans(posterior_samples) ) %>%
        mutate(m = colMeans(posterior_samples > (chance_level + eps) ) ) %>%
        mutate(prob_ratio = m / (1 - m) )
        
    # plotting it
    # prob_y_above_0 %>% filter(prob_ratio != Inf) %>% pull(prob_ratio) %>% range()
    prob_above_chance_plot <- prob_y_above_0 %>%
        mutate(prob_ratio = ifelse(prob_ratio == Inf, 2000, prob_ratio) ) %>%
        mutate(prob_ratio = ifelse(prob_ratio == 0, 0.0005, prob_ratio) ) %>%
        ggplot(aes(x = train_time, y = test_time, fill = prob_ratio) ) +
        geom_tile() +
        geom_vline(xintercept = 0, linetype = 2, linewidth = 0.5) +
        geom_hline(yintercept = 0, linetype = 2, linewidth = 0.5) +
        geom_abline(slope = 1, intercept = 0, linetype = 2, linewidth = 0.5) +
        scale_x_continuous(expand = c(0, 0) ) +
        scale_y_continuous(expand = c(0, 0) ) + 
        coord_fixed() +
        scale_fill_scico(palette = "vik", midpoint = 0, name = "p/(1-p)", trans = "log10") +
        # scale_fill_scico(palette = "vik", midpoint = 1, name = "p/(1-p)") +
        # theme_light() +
        labs(x = "Testing time (s)", y = "Training time (s)")
    
    # combining the two plots
    post_preds_plot + prob_above_chance_plot
    
    # some tests
    # post_preds_plot +
    #     geom_contour(
    #         data = prob_y_above_0,
    #         aes(x = train_time, y = test_time, z = prob_ratio),
    #         breaks = 10,
    #         color = "red",
    #         linewidth = 1,
    #         inherit.aes = FALSE
    #         )
  
}

# using the function with the decoding GAM
plot_post_timegen(model = timegen_gam, data = timegen_data, chance_level = 0.5, eps = 0.01)
```

```{r gp-timegen-preds, eval = FALSE, echo = FALSE, fig.cap = "Posterior predictions of the GP fitted on decoding accuracy over time."}
# plotting the posterior predictions
plot(
    conditional_effects(x = timegen_gp, prob = 0.95),
    points = FALSE,
    method = "posterior_epred",
    surface = TRUE,
    theme = theme_light(),
    plot = TRUE
    )

# posterior predictive checks
pp_check(timegen_gp)

# checking timecourse of timegen_data's diagonal
timegen_data %>%
    filter(train_time == test_time) %>%
    summarise(auc = mean(auc), .by = train_time) %>%
    ggplot(aes(x = train_time, y = auc) ) +
    geom_hline(yintercept = 0.5, linetype = 2) +
    geom_line() +
    labs(x = "Time (s)", y = "AUC")
```

## Application to actual M/EEG data

Assessing the reliability of the proposed approach (in comparison to other methods) using some sort of split-half reliability [@rosenblatt2018]?

## Comparing the identified onsets/offsets to other approaches

From Rousselet (2024): Five methods for multiple comparison correction were considered: two FDR methods; two cluster-based methods; and the maximum statistics. The two FDR methods were BH95 (Benjamini & Hochberg, 1995) and BY01 (Benjamini & Yekutieli, 2001), which were applied to the permutation p-values using the `p.adjust` function in `R`. The first cluster-based inference was implemented using a cluster-sum statistic of squared t-values...

Comparing performance of the GAM and GP models with:

- uncorrected univariate tests
- univariate tests + Bonferroni
- univariate tests + BH95 (Benjamini-Hochberg, 1995) aka FDR
- univariate tests + BY01 (Benjamini-Yekutieli, 2001)
- cluster-based permutation test (cluster sum)
- cluster-based permutation test (cluster depth)
- threshold-free cluster enhancement
- change point

We used `r pkrt("permuco")` and `r pkrt("changepoint")`...

```{r permutations-1d, echo = FALSE, eval = FALSE, fig.cap = "T-values timecourse with onset identified using the permuco package (clustermass method)."}
# centering AUC relative to chance level (0.5)
decoding_data_perm <- decoding_data %>%
    mutate(auc_centered = auc - 0.5) %>%
    dplyr::select(-auc)

# formatting the AUC data to be used with permuco
dv <- decoding_data_perm %>%
    pivot_wider(names_from = time, values_from = auc_centered) %>%
    dplyr::select(-participant) %>%
    data.frame()

# formatting the intercept to be used with permuco
iv <- decoding_data %>%
    dplyr::select(participant) %>%
    distinct() %>%
    mutate(participant = as.factor(participant) ) %>%
    data.frame() %>%
    mutate(intercept = 1)

# performing cluster-based permutation test
cluster_results <- clusterlm(
    formula = dv ~ intercept,
    data = iv,
    # data = decoding_data_perm,
    # formula = auc_centered ~ participant,
    # number of permutations (increase for accuracy)
    # np = 2000,
    # type of transformation
    type = "signflip"
    # using a t-test
    # test = "t"
    # multiple comparison correction
    # multcomp = "clustermass"
    # multcomp = "clusterdepth_head",
    # multcomp = "tfce"
    )

# printing results
print(cluster_results)

# plotting significant clusters
plot(cluster_results)

# retrieving t and p-values
f_values <- cluster_results$multiple_comparison$intercept$clustermass$main[, 1]
p_values <- cluster_results$multiple_comparison$intercept$clustermass$main[, 2]
```

```{r test-1d, echo = FALSE, fig.width = 9, fig.asp = 0.5, fig.cap = "Timecourse of squared t-values and s-values (continuous measure of evidence given by -log2(p-value)) with true onset and onset identified using the raw (uncorrected) p-values or the corrected p-values (BH, BY, Bonferroni, or Holm)."}
# https://github.com/GRousselet/onsetsim/blob/main/docs/weakstrongfwer_demo.md
# BH95: p.adjust(pvals, method = "BH")
# BY01: p.adjust(perm.pvals, method = "BY")

# defining an arbitrary alpha threshold
aath <- 0.05

# summarising raw_data per participant
ppt_data <- raw_df %>%
    summarise(y = mean(y), .by = c(participant, condition, x) ) %>%
    pivot_wider(names_from = condition, values_from = y) %>%
    mutate(y_diff = cond2 - cond1)

# massive univariate t-tests
tests_results <- ppt_data %>%
    group_by(x) %>%
    summarise(
        # tval = t.test(x = auc_centered, mu = 0)$statistic^2,
        # pval = t.test(x = auc_centered, mu = 0)$p.value
        tval = t.test(x = y_diff, mu = 0)$statistic^2,
        pval = t.test(x = y_diff, mu = 0)$p.value
        ) %>%
    mutate(
        pval_bh = p.adjust(p = pval, method = "BH"),
        pval_by = p.adjust(p = pval, method = "BY"),
        pval_bonf = p.adjust(p = pval, method = "bonferroni"),
        pval_holm = p.adjust(p = pval, method = "holm")
        ) %>%
    ungroup()

# finding onsets
from_timestep <- 20
onset_p <- find_onset(
    tests_results$pval[from_timestep:nrow(tests_results)] <= aath,
    tests_results$x[from_timestep:nrow(tests_results)]
    )
onset_bh <- find_onset(
    tests_results$pval_bh[from_timestep:nrow(tests_results)] <= aath,
    tests_results$x[from_timestep:nrow(tests_results)]
    )
onset_by <- find_onset(
    tests_results$pval_by[from_timestep:nrow(tests_results)] <= aath,
    tests_results$x[from_timestep:nrow(tests_results)]
    )
onset_bonf <- find_onset(
    tests_results$pval_bonf[from_timestep:nrow(tests_results)] <= aath,
    tests_results$x[from_timestep:nrow(tests_results)]
    )
onset_holm <- find_onset(
    tests_results$pval_holm[from_timestep:nrow(tests_results)] <= aath,
    tests_results$x[from_timestep:nrow(tests_results)]
    )

# plotting the results
default_colours <- hue_pal()(5)
true_onset <- 160
true_offset <- 342
tvals_plot <- tests_results %>%
    ggplot(aes(x = x, y = tval) ) +
    geom_area(position = "identity") +
    geom_vline(xintercept = true_onset, linetype = 2) +
    geom_vline(xintercept = onset_p, linetype = 2, color = default_colours[1]) +
    geom_vline(xintercept = onset_bh, linetype = 2, color = default_colours[2]) +
    geom_vline(xintercept = onset_by, linetype = 2, color = default_colours[4]) +
    geom_vline(xintercept = onset_bonf, linetype = 2, color = default_colours[3]) +
    geom_vline(xintercept = onset_holm, linetype = 2, color = default_colours[5]) +
    labs(x = "Time (ms)", y = bquote(t^2) )

plot_title <- paste0(
    "True onset: ", true_onset, "ms, ",
    "Uncorrected onset: ", round(onset_p, 3), "ms, ",
    "BH onset: ", round(onset_bh, 3), "ms, ",
    "BY onset: ", round(onset_by, 3), "ms,\n",
    "Bonf onset: ", round(onset_bonf, 3), "ms, ",
    "Holm onset: ", round(onset_holm, 3), "ms"
    )

# plotting -log2(p) (surprisal under H0) with thresholds (on p-values)
# https://lesslikely.com/statistics/s-values/
# a s-value of 4 (bits of information) is no more surprising than
# getting all heads on 4 fair coin tosses
pvals_plot <- tests_results %>%
    pivot_longer(cols = pval:pval_holm) %>%
    mutate(sval = -log2(value) ) %>%
    ggplot(aes(x = x, y = sval, colour = name) ) +
    geom_line(linewidth = 0.5) +
    geom_hline(yintercept = -log2(aath), linetype = 2) +
    geom_vline(xintercept = onset_p, linetype = 2, color = default_colours[1]) +
    geom_vline(xintercept = onset_bh, linetype = 2, color = default_colours[2]) +
    geom_vline(xintercept = onset_by, linetype = 2, color = default_colours[4]) +
    geom_vline(xintercept = onset_bonf, linetype = 2, color = default_colours[3]) +
    geom_vline(xintercept = onset_holm, linetype = 2, color = default_colours[5]) +
    labs(
        x = "Time (ms)",
        y = "-log2(p-value)",
        colour = "correction"
        )

# combining the two plots
tvals_plot + pvals_plot +
    plot_annotation(title = plot_title) & theme(plot.title = element_text(hjust = 0.5) )
```

```{r changepoint, echo = FALSE, out.width = "75%", fig.cap = "T-values timecourse with true onset/offset and onset/offset identified using the changepoint package (binary segmentation method, in green)."}
# using the changepoint package to identify onsets and offsets
res <- cpt.meanvar(data = tests_results$tval, method = "BinSeg", Q = 2)

# plotting the results
tests_results %>%
    ggplot(aes(x = time, y = tval) ) +
    geom_line(linewidth = 1) +
    geom_vline(xintercept = true_onset, linetype = 2) +
    geom_vline(xintercept = true_offset, linetype = 2) +
    geom_vline(
        xintercept = tests_results$time[res@cpts[1]],
        linetype = 3, color = "darkgreen"
        ) +
    geom_vline(
        xintercept = tests_results$time[res@cpts[2]],
        linetype = 3, color = "darkgreen"
        ) +
    labs(x = "Time (s)", y = bquote(t^2) ) +
    ggtitle(
        paste0(
            "True onset: ", true_onset, "s, ", "Change point onset: ",
            round(tests_results$time[res@cpts[1]], 3), "s"
            )
        )
```

Now cluster-based permutations using `MNE-Python` [@gramfort2013] via `r pkrt("reticulate")`...

```{r mne-cluster, echo = FALSE, eval = FALSE, fig.cap = "Cluster-based permutation tests via MNE-Python."}
# loading the reticulate package
library(reticulate)

# importing the numpy and mne python modules
np <- import("numpy")
mne <- import("mne")

# defining the function in R (it will be executed in Python)
freq_stats_gat_matrix <- function (X) {
    
    # converting R matrix to NumPy array
    X_np <- np$array(X, dtype = "float64")
    
    # running the statistical test
    results <- mne$stats$spatio_temporal_cluster_1samp_test(
        X_np,
        out_type = "mask",
        n_permutations = as.integer(1000),
        n_jobs = as.integer(4),
        verbose = TRUE
        )
    
    # extracting results
    T_obs_ <- results[[1]]
    clusters <- results[[2]]
    p_values <- results[[3]]
    
    # using the first slice of the 3D array
    p_values_ <- np$transpose(np$ones_like(X_np[1, , drop = FALSE]) )
    
    # assigning p-values to clusters
    for (i in seq_along(clusters) ) {
        
        # retrieving the current cluster
        cluster_mask <- clusters[[i]][[1]]
        idx_start <- cluster_mask$start+1
        idx_stop <- cluster_mask$stop
        
        # retrieving the p-value for this cluster
        pval <- p_values[[i]]
        
        # assigning this p-value to timesteps belonging
        # to the current cluster
        p_values_[idx_start:idx_stop] <- pval
        
    }
    
    # converting result back to R format
    return (as.matrix(np$squeeze(np$transpose(p_values_) ) ) )
    
}

# converting decoding_data to a matrix
data_matrix <- matrix(
    decoding_data$auc,
    ncol = length(unique(decoding_data$time) ),
    byrow = TRUE
    )

# running the function
chance_level <- 0.5
p_values_results <- freq_stats_gat_matrix(data_matrix-chance_level)

# converting back to a dataframe if needed
p_values_df <- data.frame(
    pval = p_values_results,
    time = decoding_data$time
    )

# saving the scores
saveRDS(object = p_values_df, file = "results/mne_permutation_decoding_scores.rds")
```

```{r fig-mne-cluster, out.width = "75%", fig.cap = "Cluster-based permutation tests via MNE-Python."}
# importing the decoding scores
p_values_df <- readRDS(file = "results/mne_permutation_decoding_scores.rds")

# plotting the s-values (-log2(p-values))
p_values_df %>%
    mutate(sval = -log2(pval) ) %>%
    ggplot(aes(x = time, y = sval) ) +
    geom_line(linewidth = 0.5) +
    geom_hline(yintercept = -log2(0.05), linetype = 2) +
    # geom_area(position = "identity") +
    labs(
        x = "Time (ms)",
        y = "-log2(p-value)"
        )
```

\newpage

# Results

...

\newpage

# Discussion

...

## Summary of the proposed approach

...

## Increasing potential usage

Prepare a wrapper `R` package and show how to call it in `Python` and integrate it with `MNE-Python` [@gramfort2013] pipelines...

## Limitations and future directions

...

## Conclusions

...

\newpage

# Packages

```{r, echo = FALSE}
# citing the R packages we have used
cite_packages(
    output = "paragraph",
    # omit = c("permuco", "brms", "reticulate"),
    omit = c("permuco", "reticulate"),
    out.dir = "."
    )
```

\newpage

# References

::: {#refs}
:::

\newpage

# Appendix

````{=html}
<!--

# Generalised additive models

In brief, a GAM is a GLM that includes a sum of smooth functions of predictor(s)... The general formula for a GAM is:

$$
g(\mathbb{E}[Y]) = \alpha + \sum_{j=1}^p s_j\left(X_j\right)
$$

where:

- $Y$ is the response variable,
- $g()$ is the link function that relates the expected value of $Y(E(Y)$ to the linear predictor.
- $\alpha$ is the intercept term.
- $s_j\left(X_j\right)$ are smooth functions, such as splines, applied to the predictor variable $X_j$.
- $p$ is the number of predictor variables.

Explain GAMs with code and figures here...

```{r gam-tutorial, echo = TRUE, eval = FALSE}
# see https://gavinsimpson.github.io/gratia/articles/posterior-simulation.html
# see https://michael-franke.github.io/Bayesian-Regression/practice-sheets/10b-GAMs.html
# and https://m-clark.github.io/generalized-additive-models/technical.html
# create a set of /k/ splines for vector /x/
get_basis <- function(x, k = 20){
  # fit a dummy GAM
  fit_gam <- mgcv::gam(
    formula = y ~ s(times, bs = "cr", k = 20),
    data    = tibble(y = 1, times = x))
  # extract model matrix
  model_matrix <- model.matrix(fit_gam)
  # wrangle to long tibble
  some_curves <- model_matrix |> 
    as_tibble() |> 
    mutate(x = x) |> 
    pivot_longer(cols = -x) |> 
    mutate(
      name = str_replace(name, "s\\(times\\).", "curve_"))
  return(some_curves)
}

make_a_wiggle <- function(some_curves, weights, data = NULL) {
  
  your_wiggly_line <- some_curves |> 
    mutate(
      weight = rep(weights, n_x),
      weighted_value = value * weight
      ) |> 
    group_by(x) |> 
    summarize(wiggly_line = sum(weighted_value)) |> 
    ungroup()
  
  your_wiggle_plot <- your_wiggly_line |> 
    ggplot(aes(x = x, y = wiggly_line)) + 
    geom_line(color = project_colors[1], size=1.5) + 
    ggtitle("your wiggly line") +
    xlab("x") + ylab("")
    
  your_wiggle_plot
}

weights <- c(0, 1, 10, rep(0, times = 17) )
make_a_wiggle(some_curves, weights)
```

# Gaussian processes

Explain GPs with code and figures here...

```{r gp-tutorial, echo = TRUE, eval = FALSE}
# see https://m-clark.github.io/models-by-example/gaussian-process.html
# see https://distill.pub/2019/visual-exploration-gaussian-processes/
# and http://www.infinitecuriosity.org/vizgp/
# defining the mean-centered function
gp_mu <- function (x) {
    
    map_dbl(x, function (x) x = 0)
    
}

# defining the covariance function (squared exponential kernel)
gp_K <- function (x, l = 1, sigma_f = 1) {
    
    sigma_f * exp( -(1/(2 * l^2)) * as.matrix(dist(x, upper = TRUE, diag = TRUE) ^ 2) )
    
}

# uniform prior
x_prior <- seq(-5, 5, 0.2)

# multivariate draws
y_prior = MASS::mvrnorm(
    n  = n_prior,
    mu = gp_mu(x_prior),
    Sigma = gp_K(x_prior, l = l, sigma_f = sigma_f)
    )

# plotting it
prior_data = data.frame(
    x  = x_prior,
    y  = t(y_prior),
    sd = apply(y_prior, 2, sd)
    ) %>% 
    pivot_longer(-c(x, sd), names_to = "variable")

prior_data %>%
    ggplot(aes(x = x, y = value) ) +
    geom_line(aes(group = variable), color = "#FF550080", alpha = 0.5) +
    labs(title = "Prior")
```

-->
````

# Mathematical formulation of the bivariate GAM

```{=html}
<!--

See https://bookdown.org/epeterson_2010/bios526_book/Module_5_3.html#bivariate-splines

-->
```

To model cross-temporal generalisation matrices of decoding performance (ROC AUC), we extended the initial (decoding) GAM to take into account the bivariate temporal distribution of AUC values, thus producing naturally smoothed estimates (timecourses) of AUC values and posterior probabilities. This model can be written as follows:

$$
\begin{aligned}
\text{AUC}_{i} &\sim \mathrm{Beta}(\mu_{i}, \phi)\\
g(\mu_{i}) &= f \left(\text{train}_{i}, \text{test}_{i} \right)\\
\end{aligned}
$$

where we assume that AUC values come from a $\mathrm{Beta}$ distribution with two parameters $\mu$ and $\phi$. We can think of $f \left(\text{train}_{i}, \text{test}_{i} \right)$ as a surface (a smooth function of two variables) that we can model using a 2-dimensional splines. Let $\mathbf{s}_{i} = \left(\text{train}_{i}, \text{test}_{i} \right)$ be some pair of training and testing samples, and let $\mathbf{k}_{m} = \left(\text{train}_{m}, \text{test}_{m} \right)$ denote the $m^{\text{th}}$ knot in the domain of $\text{train}_{i}$ and $\text{test}_{i}$. We can then express the smooth function as:

$$
f \left(\text{train}_{i}, \text{test}_{i} \right) = \alpha + \sum_{m=1}^M \beta_{m} b_{m} \left(\tilde{s}_{i}, \tilde{k}_{m} \right)
$$

Note that $b_{m}(,)$ is a basis function that maps $R \times R \rightarrow R$. A popular bivariate basis function uses *thin-plate splines*, which extend to $\mathbf{s}_{i} \in \mathbb{R}^{d}$ and $\partial l_{g}$ penalties. These splines are designed to interpolate and approximate smooth surfaces over two dimensions (hence the "bivariate" term). For $d=2$ dimensions and $l=2$ (smoothness penalty involving second order derivative):

$$
f \left(\tilde{s}_{i} \right) = \alpha + \beta_{1} x_{i} + \beta_{2} z_{i} +\sum_{m=1}^{M} \beta_{2+m} b_m\left(\tilde{s}_i, \tilde{k}_m\right)
$$

using the the radial basis function given by:

$$
b_m\left(\tilde{s}_i, \tilde{k}_m\right)=\left\|\tilde{s}_i-\tilde{k}_m\right\|^2 \log \left\|\tilde{s}_i-\tilde{k}_m\right\|
$$

where $\left\|\mathbf{s}_i-\mathbf{k}_{m}\right\|$ is the Euclidean distance between the covariate $\mathbf{s}_{i}$ and the knot location $\mathbf{k}_{m}$.

\newpage

# Threshold-free cluster enhancement

Cluster-based permutation approaches require defining a cluster-forming threshold (e.g., a t- or f-value) as the initial step of the algorithm. As different cluster-forming thresholds lead to clusters with different spatial or temporal extent, this threshold modulates the sensitivity of the subsequent permutation test. The threshold-free cluster enhancement method (TFCE) was introduced by @smith2009 to overcome this arbitrary threshold.

In brief, the TFCE method works as follows. Instead of picking an arbitrary cluster-forming threshold (e.g., $t=2$), we try all (or many) possible thresholds in a given range and check whether a given timestep/voxel belongs to a significant cluster under any of the set of thresholds... Then, instead of using cluster mass, we use a weighted average between the cluster extend ($e$, how broad is the cluster, that is, how many connected samples it contains) and the cluster height ($h$, how high is the cluster, that is, how large is the test statistic) according to the formula:

$$
\text{TFCE} = \int_{h} e(h)^{E} h^{H} \mathrm{d}h
$$

Where... the parameters $E$ and $H$ are set a priori and control the influence of the extend and height on the TFCE. Then, p-value for timestep/voxel $i$ is computed by comparing it TFCE with the null distribution of TFCE values. For each permuted signal, we keep the maximal value over the whole signal for the null distribution of the TFCE.... But see @sassenhagen2019...

\newpage

# Using the `R` package and integration with `MNE-Python`

Explain how to use the `R` package and to integrate it with `MNE` epochs...

```{r r-python, eval = FALSE}
# to-do adding some code here...
```
